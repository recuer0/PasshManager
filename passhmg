#!/bin/bash

# version --> 1.1.0

# test line

#Colours
greenColour="\e[0;32m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m"
blueColour="\e[0;34m"
yellowColour="\e[0;33m"
purpleColour="\e[0;35m"
turquoiseColour="\e[0;36m"
grayColour="\e[0;37m"

user=$(whoami)

function ctrl_c(){   # Definir lo que pasará al salir del programa
  echo -e "\n\n${redColour}[!] Saliendo...${endColour}\n"   # Mensaje de salida
  if [ "$user" == "root" ]; then
    rm -rf "/$user/.config/.passwords/.decrypted"   # Eliminación de directorio .decrypted
    mkdir "/$user/.config/.passwords/.decrypted" && chmod 700 "/$user/.config/.passwords/.decrypted"   # Creación de la carpeta .decrypted
    if [ -d "/$user/.config/.passwords/.temp" ]; then   # Comprobar si el directorio .temp existe (se estaba produciendo cambio de clave)
      for temp in "/$user/.config/.passwords/.temp"/.*; do   # Bucle para copiar los archivos de .temp a .encrypted
        if [ -f "$temp" ]; then
          cp "$temp" "/$user/.config/.passwords/.encrypted"
        fi
      done
      rm -rf "/$user/.config/.passwords/.temp"   # Eliminación de directorio .temp
    fi
    if [ -f "/$user/.config/.passwords/.repo/passwdm" ]; then
      rm "/$user/.config/.passwords/.repo/passwdm"
      chmod +w "/$user/.config/.passwords/.version"
      echo "1.1.0" > "/$user/.config/.passwords/.version"
      chmod -w "/$user/.config/.passwords/.version"
      ruta=$(readlink -f "$0")
      sed '/# version --> [0-9]\+\.[0-9]\+\.[0-9]\+/c\# version --> 1.1.0' $ruta
    fi
  else
    rm -rf "/home/$user/.config/.passwords/.decrypted"   # Eliminación de directorio .decrypted
    mkdir "/home/$user/.config/.passwords/.decrypted" && chmod 700 "/home/$user/.config/.passwords/.decrypted"   # Creación de la carpeta .decrypted
    if [ -d "/home/$user/.config/.passwords/.temp" ]; then   # Comprobar si el directorio .temp existe (se estaba produciendo cambio de clave)
      for temp in "/home/$user/.config/.passwords/.temp"/.*; do   # Bucle para copiar los archivos de .temp a .encrypted
        if [ -f "$temp" ]; then
          cp "$temp" "/home/$user/.config/.passwords/.encrypted"
        fi
      done
      rm -rf "/home/$user/.config/.passwords/.temp"   # Eliminación de directorio .temp
    fi
    if [ -f "/home/$user/.config/.passwords/.repo/passwdm" ]; then
      rm "/home/$user/.config/.passwords/.repo/passwdm"
      chmod +w "/home/$user/.config/.passwords/.version"
      echo "1.1.0" > "/home/$user/.config/.passwords/.version"
      chmod -w "/home/$user/.config/.passwords/.version"
      ruta=$(readlink -f "$0")
      sed '/# version --> [0-9]\+\.[0-9]\+\.[0-9]\+/c\# version --> 1.1.0' $ruta
    fi
  fi
  gpg-connect-agent reloadagent /bye
  tput cnorm; exit 1   # Recuperar el cursor y salida no exitosa
}

trap ctrl_c INT   # Llama a la función ctrl_c cuando se presiona Ctrl+C

if [ "$user" == "root" ]; then
  PASSWORD_DIRECTORY="/$user/.config/.passwords"   # Definir directorio principal
  ENCRYPTED_DIRECTORY="/$user/.config/.passwords/.encrypted"   # Definir directorio donde se almacenarán contraseñas encriptadas
  DECRYPTED_DIRECTORY="/$user/.config/.passwords/.decrypted"   # Definir directorio donde se almacenarán temporalmente contraseñas desencriptadas
  ENCRYPT_CODE="/$user/.config/.passwords/.encryptcode"   # Archivo que almacenará el hash de la clave de encriptación
  TEMPORAL_DIRECTORY="/$user/.config/.passwords/.temp"   # Directorio que almacenará temporalmente las contraseñas mientras se cambia la clave
  VERSION_FILE="/$user/.config/.passwords/.version"
  REPOSITORY_DIRECTORY="/$user/.config/.passwords/.repo"
  echo -e "\n${redColour}[!]${endColour} ¡Alerta! Está ejecutando este script como ${redColour}root${endColour}"
else
  PASSWORD_DIRECTORY="/home/$user/.config/.passwords"   # Definir directorio principal
  ENCRYPTED_DIRECTORY="/home/$user/.config/.passwords/.encrypted"   # Definir directorio donde se almacenarán contraseñas encriptadas
  DECRYPTED_DIRECTORY="/home/$user/.config/.passwords/.decrypted"   # Definir directorio donde se almacenarán temporalmente contraseñas desencriptadas
  ENCRYPT_CODE="/home/$user/.config/.passwords/.encryptcode"   # Archivo que almacenará el hash de la clave de encriptación
  TEMPORAL_DIRECTORY="/home/$user/.config/.passwords/.temp"   # Directorio que almacenará temporalmente las contraseñas mientras se cambia la clave
  VERSION_FILE="/home/$user/.config/.passwords/.version"
  REPOSITORY_DIRECTORY="/home/$user/.config/.passwords/.repo"
fi

if [ ! -d $PASSWORD_DIRECTORY ]; then   # Creación del directorio principal y asignación de permisos (si no existe)
  mkdir -p $PASSWORD_DIRECTORY && chmod 700 $PASSWORD_DIRECTORY
fi

if [ ! -d $ENCRYPTED_DIRECTORY ]; then   # Creación del directorio .encrypted y asignación de permisos (si no existe)
  mkdir -p $ENCRYPTED_DIRECTORY && chmod 700 $ENCRYPTED_DIRECTORY
fi

if [ ! -d $DECRYPTED_DIRECTORY ]; then   # Creación del directorio .decrypted y asignación de permisos (si no existe)
  mkdir -p $DECRYPTED_DIRECTORY && chmod 700 $DECRYPTED_DIRECTORY
fi

if [ ! -f "$PASSWORD_DIRECTORY/.register" ]; then   # Creación del registro de contraseñas y asignación de permisos (si no existe)
  touch "$PASSWORD_DIRECTORY/.register" && chmod 700 "$PASSWORD_DIRECTORY/.register"
fi

if [ ! -f "$ENCRYPT_CODE" ]; then   # Creación del archivo que contiene la clave y asignación de permisos (si no existe)
  touch "$ENCRYPT_CODE" && chmod 700 "$ENCRYPT_CODE"
fi

if [ ! -f "$VERSION_FILE" ]; then
  touch "$VERSION_FILE"
  echo "1.1.0" > "$VERSION_FILE"
  chmod 400 "$VERSION_FILE"
fi

if [ ! -d "$REPOSITORY_DIRECTORY" ]; then
  mkdir "$REPOSITORY_DIRECTORY" && chmod 700 "$REPOSITORY_DIRECTORY"
fi

if [ ! -s "$ENCRYPT_CODE" ]; then   # Si el archivo que contiene la clave está vacío, se dirá al usuario de establecer la clave
  echo -e "\n${yellowColour}[+]${endColour} Para proteger sus ${blueColour}datos${endColour}, debe establecer una ${greenColour}clave de encriptación${endColour}. Deberá\n    recordarla muy bien o perderá sus datos. Necesitarás saberla para cambiarla.\n"
  echo -e -n "${yellowColour}[+]${endColour} Establece una ${greenColour}clave de encriptación${endColour}: "
  read -s encryptCode   # Almacenar la contraseña en una variable
  echo -e -n "\n${yellowColour}[+]${endColour} Vuelva a introducir la ${greenColour}clave de encriptación${endColour}: "
  read -s encryptCodeVerify   # Almacenar la contraseña por segunda vez en una variable para comparar si son iguales

  if [ "$encryptCode" == "$encryptCodeVerify" ]; then   # Verificar si las contraseñas coinciden
    if [ -n "$encryptCode" ]; then   # Verificar si la clave tiene contenido
      echo "$encryptCode" | sha512sum > "$ENCRYPT_CODE"   # Hashear la clave
      echo -e "\n\n${yellowColour}[+]${endColour} Clave establecida ${turquoiseColour}exitosamente${endColour}. No la compartas con nadie\n"
    else
      echo -e "\n\n${redColour}[!] La clave de encriptación no puede estar vacía${endColour}\n"
      exit 1   # Salida no exitosa
    fi
  else
    echo -e "\n\n${redColour}[!] Las claves no coinciden. Vuélvalo a intentar${endColour}\n"
    exit 1   # Salida no exitosa
  fi
fi

function helpPanel(){   # Panel de ayuda
echo -e "\n${yellowColour}[+]${endColour} Panel de ayuda:"
echo -e "\t${blueColour}·save${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}primer argumento${endColour}${purpleColour})${endColour} ${blueColour}[${endColour}save ${yellowColour}(nombre)${endColour}${blueColour}]${endColour} ${greenColour}-->${endColour} Guardar una contraseña"
echo -e "\t${blueColour}·get${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}primer argumento${endColour}${purpleColour})${endColour} ${blueColour}[${endColour}get ${yellowColour}(nombre)${endColour}${blueColour}]${endColour} ${greenColour}-->${endColour} Obtener una contraseña"
echo -e "\t${blueColour}·list${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}primer argumento${endColour}${purpleColour})${endColour} ${endColour}-->${endColour} Listar todas las contraseñas guardadas"
echo -e "\t${blueColour}·delete${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}primer argumento${endColour}${purpleColour})${endColour} ${blueColour}[${endColour}delete ${yellowColour}(nombre)${endColour}${blueColour}]${endColour} ${greenColour}-->${endColour} eliminar una contraseña"
echo -e "\t${blueColour}·chkey${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}primer argumento${endColour}${purpleColour})${endColour} ${greenColour}-->${endColour} Cambiar la contraseña de encriptación"
echo -e "\t${blueColour}·reset${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}primer argumento${endColour}${purpleColour})${endColour} ${greenColour}-->${endColour} Resetear los archivos (contraseñas y clave)"
echo -e "\t   ${purpleColour}-f${endColour} ${greenColour}-->${endColour} Resetear sin clave de encriptación en caso de olvido ${yellowColour}(debe ir antes de \"reset\")${endColour}"
echo -e "\t${blueColour}·version${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}primer argumento${endColour}${purpleColour})${endColour} ${greenColour}-->${endColour} Verificar la versión de la herramienta"
echo -e "\t${blueColour}·(nombre)${endColour} ${greenColour}-->${endColour} ${purpleColour}(${endColour}${yellowColour}segundo argumento${endColour} ${purpleColour}|${endColour} ${yellowColour}no siempre necesario${endColour}${purpleColour})${endColour}"
echo -e "\n${yellowColour}[+]${endColour} ¡SCRIPT SENSIBLE A MAYÚSCULAS EN NOMBRES!\n"
echo -e "${yellowColour}[+]${endColour} Recuerda su clave de encriptación. La necesitará para hacer cualquier cambio.\n"
echo -e "${yellowColour}[+]${endColour} Recuerde que cada usuario del sistema tiene sus propias contraseñas y no serán visibles entre ellos (incluyendo root)\n"
echo -e "${yellowColour}[+]${endColour} Futura actualización --> Sincronización con repositorio de Github para actualización automática\n"
}

function save_password {   # Función para guardar contraseña
  
  echo -e -n "\n${yellowColour}[+]${endColour} Antes de hacer cambios, deberás introducir la ${greenColour}clave de encriptación${endColour}: "
  read -s encryptCode   # Almacenar la clave para verificar si es la correcta

  encryptCodeHash=$(echo $encryptCode | sha512sum)   # Hashear la clave que se introdució
  realCodeHash=$(cat $ENCRYPT_CODE)   # Obtener el hash de la clave correcta

  if [ "$encryptCodeHash" == "$realCodeHash" ]; then   # Comparar la clave introducida y la real (hash)
    if [ ! -f "$ENCRYPTED_DIRECTORY/.$1_passwd.gpg" ]; then   # Preguntar si el archivo que almacena una contraseña ya ha sido guardado
      echo -e -n "\n\n${yellowColour}[+]${endColour} ¿Qué ${blueColour}nombre${endColour}${yellowColour}/${endColour}${blueColour}correo${endColour} desea guardar para ${purpleColour}"$1"${endColour}? "
      read user   # Almacenar el nombre/correo del servicio que se quiere guardar

      echo -e -n "${yellowColour}[+]${endColour} ¿Qué ${blueColour}contraseña${endColour} desea guardar para ${purpleColour}"$1"${endColour}? "
      read -s password   # Almacenar la contraseña del servicio que se quiere guardar
      
      echo -e -n "\n${yellowColour}[+]${endColour} Repita la ${blueColour}contraseña${endColour} para ${purpleColour}"$1"${endColour}: "
      read -s passwordVerify   # Volver a almacenar la contraseña para ver si coinciden

      if [ "$password" == "$passwordVerify" ]; then   # Comprobar que ambas contraseñas coinciden
        echo "$(echo "$user":"$password" | base64 | xxd | base64 | xxd | base64 | base64)" >> "$ENCRYPTED_DIRECTORY/.$1_passwd" && gpg --batch --passphrase "$encryptCode" -c "$ENCRYPTED_DIRECTORY/.$1_passwd" && rm "$ENCRYPTED_DIRECTORY/.$1_passwd"   # Codificar el usuario y contraseña repetidamente, encriptarlo con gpg y enviarlo al directorio .encrypted
        gpg-connect-agent reloadagent /bye
        echo "$1" >> "$PASSWORD_DIRECTORY/.register"   # Almacenar el nombre del servicio en el registro
        chmod 700 $ENCRYPTED_DIRECTORY/.$1_passwd.gpg   # Asignar permisos a el archivo encriptado
        chmod 700 $PASSWORD_DIRECTORY/.register   # Asignar permisos al registro
        echo -e "\n\n${yellowColour}[+]${endColour} Contraseña guardada para ${purpleColour}"$1"${endColour}.\n"
      else
        echo -e "\n${redColour}\n[!] Las contraseñas no coinciden${endColour}\n"
        exit 1   # Salida no exitosa
      fi
    else
      echo -e -n "\n\n${redColour}[!]${endColour} Esta contraseña ya ha sido ${greenColour}registrada${endColour}, ¿desea modificarla? ${yellowColour}(y/n)${endColour} "
      read mod   # Verificar si el usuario quiere sobrescribir la contraseña de un servicio con (y/n)

      if [ "$mod" == "y" ] || [ "$mod" == "Y" ]; then   # Verificar si la respuesta es "Y" o "y"
        echo -e -n "\n${yellowColour}[+]${endColour} Elija un nuevo nombre/correo para ${purpleColour}"$1"${endColour}: "
        read user   # Almacenar el nuevo nombre/correo

        echo -e -n "${yellowColour}[+]${endColour} Elija una nueva contraseña para ${purpleColour}"$1"${endColour}: "
        read -s password   # Almacenar la nueva contraseña

        echo -e -n "\n${yellowColour}[+]${endColour} Repita la nueva contraseña para ${purpleColour}"$1"${endColour}: "
        read -s passwordVerify   # Volver a almacenar la contraseña para verificar si coinciden

        if [ "$password" == "$passwordVerify" ]; then   # Verificar si las contraseñas coinciden
          echo "$(echo $user:$password | base64 | xxd | base64 | xxd | base64 | base64)" > "$ENCRYPTED_DIRECTORY/.$1_passwd" && rm "$ENCRYPTED_DIRECTORY/.$1_passwd.gpg" && gpg --batch --passphrase "$encryptCode" -c "$ENCRYPTED_DIRECTORY/.$1_passwd" && rm "$ENCRYPTED_DIRECTORY/.$1_passwd"   # Codificar el nuevo usuario y contraseña
          gpg-connect-agent reloadagent /bye
          echo -e "\n\n${yellowColour}[+]${endColour} ¡Contraseña actualizada para ${purpleColour}"$1"${endColour}!\n"
        else
          echo -e "\n\n${redColour}[!] Las contraseñas no coinciden, abortando...${endColour}\n"
          exit 1
        fi

      elif [ "$mod" == "n" ] || [ "$mod" == "N" ]; then
        echo -e "\n\n${redColour}[!] Saliendo...${endColour}\n"
        exit 1
      else
        echo -e "\n${redColour}[!] Respuesta no esperada, saliendo...${endColour}\n"
        exit 1
      fi
    fi
  else
    echo -e "\n\n${redColour}[!] Error al introducir clave de encriptación. Clave errónea${endColour}\n"
  fi
}

function get_password {
    echo -e -n "\n${yellowColour}[+]${endColour} Antes de hacer cambios, deberás introducir la ${greenColour}clave de encriptación${endColour}: "
    read -s encryptCode

    encryptCodeHash=$(echo $encryptCode | sha512sum)
    realCodeHash=$(cat $ENCRYPT_CODE)
    tput civis
    if [ "$encryptCodeHash" == "$realCodeHash" ]; then
      echo "";
      gpg --batch --passphrase "$encryptCode" -d "$ENCRYPTED_DIRECTORY/.$1_passwd.gpg" > "$DECRYPTED_DIRECTORY/.$1_passwd" 2>/dev/null

      user=$(cat "$DECRYPTED_DIRECTORY/.$1_passwd" | base64 -d | base64 -d | xxd -r | base64 -d | xxd -r | base64 -d | cut -d ':' -f 1)
      password=$(cat "$DECRYPTED_DIRECTORY/.$1_passwd" | base64 -d | base64 -d | xxd -r | base64 -d | xxd -r | base64 -d | cut -d ':' -f 2,3,4,5,6,7,8,9,10,11)
      
      rm "$DECRYPTED_DIRECTORY/.$1_passwd"

      if [ "$password" ]; then
          if [ "$user" ]; then
            echo -e "\n${yellowColour}[+]${endColour} El usuario/correo de ${blueColour}$1${endColour} es: ${purpleColour}$user${endColour}"
          else
            echo -e "\n"
          fi
        echo -e "${yellowColour}[+]${endColour} La contraseña de ${blueColour}$1${endColour} es: ${purpleColour}$password${endColour}\n"
      else
        echo -e "\n${redColour}[+] La contraseña de${endColour} ${blueColour}$1${endColour} ${redColour}no ha sido registrada${endColour}\n"
      fi
    else
      echo -e "\n\n${redColour}[!] Error al introducir la clave de encriptación. Clave errónea${endColour}\n"
    fi
    tput cnorm
}

function list_passwords {
  echo -e "\n${purpleColour}$(cat $PASSWORD_DIRECTORY/.register)${endColour}\n"
}

function delete_password {
  local archivo
  local registro
  archivo="$ENCRYPTED_DIRECTORY/.$1_passwd.gpg"
  registro=$(cat $PASSWORD_DIRECTORY/.register | grep "$1")

    if [ -f "$archivo" ] || [ "$registro" ]; then
      
      echo -e -n "\n${redColour}[!]${endColour} La contraseña de ${blueColour}$1${endColour} se eliminará. ¿Desea continuar? ${yellowColour}(y/n)${endColour}:${yellowColour} "
      read resultado
      
      if [ "$resultado" == "Y" ] || [ "$resultado" == "y" ]; then
        rm -f "$archivo"
        sed -i "/^$1\$/d" $PASSWORD_DIRECTORY/.register
        echo -e "\n${yellowColour}[+]${endColour} La contraseña ha sido eliminada ${greenColour}correctamente${endColour}\n"
      elif [ "$resultado" == "N" ] || [ "$resultado" == "n" ]; then
        echo -e "\n${redColour}[!] Abortando...${endColour}\n"
        exit 1
      else
        echo -e "\n${redColour}[!] Respuesta no esperada, saliendo...${endColour}\n"
        exit 1
      fi
      
    else
      echo -e "\n${redColour}[!] La contraseña de ${blueColour}"$1"${endColour} ${redColour}no ha sido registrada${endColour}\n"
    fi
}

function chkey {
  echo -e -n "\n${yellowColour}[+]${endColour} ¿Desea ${purpleColour}cambiar${endColour} la clave de encriptación? ${yellowColour}(Y/n)${endColour}: ${yellowColour}"
  read answer

    if [ "$answer" == "Y" ] || [ "$answer" == "y" ] || [ "$answer" == '' ]; then
      echo -e -n "\n${yellowColour}[+]${endColour} Introduzca la clave de encriptación: "
      read -s encryptKey

      encryptKeyHash=$(echo $encryptKey | sha512sum)
      realEncryptKeyHash=$(cat $ENCRYPT_CODE) 

        if [ "$encryptKeyHash" == "$realEncryptKeyHash" ]; then
          echo -e -n "\n\n${yellowColour}[+]${endColour} Elija una nueva clave de encriptación: "
          read -s newEncryptKey

          echo -e -n "\n${yellowColour}[+]${endColour} Confirme la nueva contraseña de encriptación: "
          read -s newEncryptKeyVerify

          if [ "$newEncryptKey" == "$newEncryptKeyVerify" ]; then
            mkdir "$TEMPORAL_DIRECTORY"

            for temp in "$ENCRYPTED_DIRECTORY"/.*; do
              if [ -f "$temp" ]; then
                cp "$temp" "$TEMPORAL_DIRECTORY"
              fi
            done

            echo -e "\n\n${yellowColour}[+]${endColour} Desencriptando archivos"
            sleep 0.8
            echo -e "${yellowColour}[+]${endColour} Esto puede tardar un rato...\n"

             for encrypted_file in "$ENCRYPTED_DIRECTORY/".*; do
              if [ -f "$encrypted_file" ]; then
                tput civis
                decrypted_file="$DECRYPTED_DIRECTORY/$(basename "$encrypted_file")"
                gpg --batch --passphrase "$encryptKey" -d "$encrypted_file" > "$decrypted_file" 2>/dev/null
                rm $encrypted_file
                tput cnorm
              fi
             done

             for decrypted_file in "$DECRYPTED_DIRECTORY/".*; do
              if [ -f "$decrypted_file" ]; then
                # tput civis
                gpg --batch --passphrase "$newEncryptKey" -c "$decrypted_file" 2>/dev/null
                gpg-connect-agent reloadagent /bye
                rm $decrypted_file
                # tput cnorm
              fi
             done 

            mv "$DECRYPTED_DIRECTORY"/.* "$ENCRYPTED_DIRECTORY" 2>/dev/null 
            for file in "$ENCRYPTED_DIRECTORY"/.*.gpg; do
              if [ -f "$file" ]; then
                newName="${file%.gpg}"
                mv "$file" "$newName"
              fi
            done

          echo "$newEncryptKey" | sha512sum > "$ENCRYPT_CODE"
          rm -rf "$TEMPORAL_DIRECTORY"
 
          else  
            echo -e "${redColour}[!] Las nuevas claves no coinciden${endColour}"
            exit 1
          fi

        else
          echo -e "\n\n${redColour}[!] Error al introducir la clave de encriptación. La clave es errónea${endColour}\n"
          exit 1
        fi

    elif [ "$answer" == "N" ] || [ "$answer" == "n" ] ; then
      echo -e "\n${redColour}[!] Abortando...${endColour}\n"
      exit 1
    else
      echo -e "\n${redColour}[!] Respuesta no esperada. Saliendo...${endColour}\n"
      exit 1
    fi
}

function reset {
  echo -e -n "\n${redColour}[!]${endColour} Esto ${redColour}eliminará${endColour} todas sus contraseñas, y su clave de encriptación. ¿Realmente desea hacerlo? ${yellowColour}(y/n)${endColour}:${yellowColour} "
  read answer

  if [ "$answer" == "Y" ] || [ "$answer" == "y" ]; then
    echo -e -n "\n${yellowColour}[+]${endColour} Introduzca la clave de encriptación: "
    read -s encryptKey

    echo -e -n "\n${yellowColour}[+]${endColour} Vuelva a introducir la clave de encriptación: "
    read -s encryptKeyVerify

    encryptKeyHash=$(echo $encryptKey | sha512sum)
    realEncryptKeyHash=$(cat $ENCRYPT_CODE)

    if [ "$encryptKey" == "$encryptKeyVerify" ]; then
      if [ "$encryptKeyHash" == "$realEncryptKeyHash" ]; then
        rm -rf "$PASSWORD_DIRECTORY"
        sleep 1.3
        echo -e "\n${yellowColour}[+]${endColour} Todo ha sido eliminado correctamente\n"
      else
        echo -e "\n\n${redColour}[!] Error al introducir la clave de encriptación. La clave es errónea${endColour}\n"
        exit 1
      fi
    else
      echo -e "\n\n${redColour}[!] Las claves introducidas no coinciden${endColour}\n"
      exit 1
    fi
  
  elif [ "$answer" == "N" ] || [ "$answer" == "n" ]; then
    echo -e "\n${redColour}[!] Abortando...${endColour}\n"
    exit 1
  else
    echo -e "\n${redColour}[!] Respuesta no esperada. Saliendo...${endColour}\n"
    exit 1
  fi
}

function force_reset {
    echo -e -n "\n${redColour}[!]${endColour} Esto ${redColour}eliminará${endColour} todas sus contraseñas, y su clave de encriptación. ¿Realmente desea hacerlo? ${yellowColour}(y/n)${endColour}:${yellowColour} "
    read answer
    if [ "$answer" == "Y" ] || [ "$answer" == "y" ]; then
      echo -e -n "\n${yellowColour}[+]${endColour} ¿Estás seguro que quieres ${redColour}eliminar${endColour} sus contraseñas? Escriba "${blueColour}confirmar${endColour}" para que la operación proceda: ${blueColour}"
      read confirmation
      if [ "$confirmation" == "confirmar" ] || [ "$confirmation" == "CONFIRMAR" ]; then
        tput civis
        rm -rf "$PASSWORD_DIRECTORY"
        sleep 1.3
        echo -e "\n${yellowColour}${yellowColour}[+]${endColour}${endColour} Todo ha sido eliminado correctamente\n"
        tput cnorm
      else
        echo -e "\n${redColour}[!] Confirmación fallida. Saliendo...${endColour}\n"
        exit 1
      fi
    elif [ "$answer" == "N" ] || [ "$answer" == "n" ]; then
      echo -e "\n${redColour}[!] Abortando...${endColour}\n"
      exit 1
    else
      echo -e "\n${redColour}[!] Respuesta no esperada. Saliendo...${endColour}\n"
      exit 1
    fi
}

function check_version {
  ruta=$(readlink -f "$0")
  version_script=$(cat $ruta | head -n 3 | tail -n 1 | awk 'NF{print $NF}')
  version_file=$(echo $(cat $VERSION_FILE))
  if [ "$version_script" == "$version_file" ]; then
    tput civis
    echo -e "\n${yellowColour}[+]${endColour} Verificando si existen actualizaciones disponibles..."
    sleep .5
    echo -e "${yellowColour}[+]${endColour} Esto puede tardar unos segundos...\n"
    svn export https://github.com/recuer0/PasshManager/trunk/passhmg "$REPOSITORY_DIRECTORY/passwdm" &>/dev/null
    new_version=$(cat "$REPOSITORY_DIRECTORY/passwdm" | grep -m 1 "version" )
    new_version_yp=$(echo "$new_version" | awk 'NF{print $NF}')
    new_version_np=$(echo "$new_version" | awk 'NF{print $NF}' | tr -d '.')
    original_version_np=$(echo "$version_file" | tr -d '.')
    
    if [ "$new_version_np" -gt "$original_version_np" ]; then
      original_wov=$(echo $(cat "$ruta" | awk '/version/ && ++count == 1 {next} 1'| md5sum))
      new_wov=$(echo $(cat "$REPOSITORY_DIRECTORY/passwdm" | awk '/version/ && ++count == 1 {next} 1' | md5sum))
      if [ "$original_wov" != "$new_wov" ]; then
        echo -e "${yellowColour}[+]${endColour} ¡Actualizaciones Encontradas!\n"
        echo -e "${yellowColour}[+]${endColour} Versión actual ${yellowColour}-->${endColour} ${redColour}$version_file${endColour}"
        echo -e "${yellowColour}[+]${endColour} Nueva versión  ${yellowColour}-->${endColour} ${greenColour}$new_version_yp${endColour}"
        tput cnorm
        echo -en "\n${yellowColour}[+]${endColour} ¿Desea actualizar ahora Ultimate Password Manager? ${yellowColour}(Y/n)${endColour}: ${yellowColour}"
        read answer
        
        if [ "$answer" == "Y" ] || [ "$answer" == "y" ] || [ "$answer" == '' ]; then
          echo -e "\n[+]${endColour} Actualizando herramienta...\n"
          chmod +x "$REPOSITORY_DIRECTORY/passwdm"
          mv "$REPOSITORY_DIRECTORY/passwdm" "$ruta"
          chmod +w "$VERSION_FILE"
          echo "$new_version_yp" > "$VERSION_FILE"
          chmod -w "$VERSION_FILE"
          echo -e "${yellowColour}[+]${endColour} Actualizaciones concluidas con éxito\n"
        elif [ "$answer" == "N" ] || [ "$answer" == "n" ]; then
          rm "$REPOSITORY_DIRECTORY/passwdm"
        else
          echo -e "\n[!] Respuesta no esperada. Abortando...\n"
          rm "$REPOSITORY_DIRECTORY/passwdm"
          exit 1
        fi

      else
        echo -e "\n${redColour}[!]${endColour} Se ha detectado una versión ${redColour}errónea${endColour} o ${redColour}manipulada${endColour}"
        rm "$REPOSITORY_DIRECTORY/passwdm"
        exit 1
      fi
    else
      echo -e "${yellowColour}[+]${endColour} Versión actual ${yellowColour}-->${endColour} ${greenColour}$version_file${endColour}\n"
      echo -e "${redColour}[!]${endColour} No hay actualizaciones disponibles\n"
      rm "$REPOSITORY_DIRECTORY/passwdm"
    fi
    tput cnorm
  else
    echo -e "\n${redColour}[!]${endColour} Ha habido un problema al comprobar la versión, recuerde ${redColour}no manipular${endColour} los archivos de configuración para\n    evitar problemas. Trate de actualizar la versión manualmente descargándolo del repositorio de ${purpleColour}Github${endColour}.\n    Estamos intentando solucionar el problema, vuélvalo a intentar...\n\n    ${purpleColour}https://github.com/recuer0/Ultimate-PasswdM${endColour}\n"  
  fi
}

force_reset=false

declare -i parameter_counter=0

while getopts "f:s:g:ld:crv" arg; do
  case $arg in
    f) if [ "$OPTARG" == "reset" ] || [ "$parameter_counter" -eq 5 ]; then
          force_reset=true
       else
          echo -e "\n${redColour}[!]${endColour} El parámetro ${purpleColour}-f${endColour} debe ir acompañado de ${blueColour}\"reset\"${endColour}\n"
          exit 1
       fi ;;
    s) let parameter_counter+=1 ;;
    g) let parameter_counter+=2 ;;
    l) let parameter_counter+=3 ;;
    d) let parameter_counter+=4 ;;
    r) let parameter_counter+=5 ;;
    c) let parameter_counter+=6 ;;
    v) let parameter_counter+=7 ;;
  esac
done

if [ "$force_reset" == "true" ]; then
  force_reset
elif [ "$1" == "save" ] || [ "$parameter_counter" -eq 1 ]; then
  save_password "$2" "$3"
elif [ "$1" == "get" ] || [ "$parameter_counter" -eq 2 ]; then
  get_password "$2"
elif [ "$1" == "list" ] || [ "$parameter_counter" -eq 3 ]; then
  list_passwords
elif [ "$1" == "delete" ] || [ "$parameter_counter" -eq 4 ] ; then
  delete_password "$2"
elif [ "$1" == "reset" ] || [ "$parameter_counter" -eq 5 ]; then
  reset
elif [ "$1" == "chkey" ] || [ "$parameter_counter" -eq 6 ]; then
  chkey
elif [ "$1" == "version" ] || [ "$parameter_counter" -eq 7 ]; then
  check_version
else
  helpPanel
fi
